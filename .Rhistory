knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(webshot)
bf.df = read_csv("BlackFriday.csv") #Se cargan directamente los datos en una tibble
bf.df %>% summary() #Se comprueban los datos que contiene para saber como tratarlos
bf.df %>% str()
bf.df %>% head()
bf.df %>% tail()
bf.df = mutate(bf.df[,-c(10:11)]) %>% na.omit %>% droplevels() #Se eliminan NAs (Especialmente concentrados en las columnas Product_Category 2 y 3)
bf.df = bf.df[!duplicated(bf.df),] #Se eliminan duplicados en caso de haberlos
bf.df$User_ID = bf.df$User_ID - 1000000 #Se convierten User_ID en números del 1 al 6040
bf.df$Product_ID = as.factor(bf.df$Product_ID) #Se transforman a factor los datos que se considera oportuno
bf.df$Gender = as.factor(bf.df$Gender)
bf.df$Age = as.factor(bf.df$Age)
bf.df$City_Category = as.factor(bf.df$City_Category)
bf.df$Marital_Status = as.factor(bf.df$Marital_Status)
bf.df$Stay_In_Current_City_Years = as.factor(bf.df$Stay_In_Current_City_Years)
bf.df$Product_Category_1 = as.factor(bf.df$Product_Category_1)
bf.df$Occupation = as.factor(bf.df$Occupation)
bf.df %>% summary() #De nuevo se comprueban los datos para confirmar que ya estén "limpios"
bf.df %>% str()
View(bf.df)
ggpairs(auto[,])
install.packages("GGally")
library(GGally)
ggpairs(auto[,])
ggpairs(bf.df)
ggpairs(bf.df[,c(1,3:10)])
View(bf.df)
ggpairs(bf.df[,c(1,3,4,6:10)])
ggpairs(bf.df, cardinality_threshold = 20)
ggpairs(bf.df[,1,3:10], cardinality_threshold = 20)
ggpairs(bf.df[,c(1,3:10)], cardinality_threshold = 20)
ggpairs(bf.df[,c(1,3:10)], cardinality_threshold = 21)
ggpairs(bf.df[,c(3:10)], cardinality_threshold = 21)
?ggpairs
bf.df %>% filter(Age == "26-35" & Gender == "M") %>% ggpairs(bf.df[,5:10], cardinality_threshold = 21)
bf.df %>% filter(Age == "26-35" & Gender == "M") %>% ggpairs([,5:10], cardinality_threshold = 21)
bf.df[,5:10] %>% filter(Age == "26-35" & Gender == "M") %>% ggpairs(cardinality_threshold = 21)
bf.df %>% filter(Age == "26-35" & Gender == "M") %>% ggpairs(bf.df[,5:10], cardinality_threshold = 21)
bf.df[,5:10]
bf.df %>% filter(Age == "26-35" & Gender == "M") %>% ggpairs(bf.df[,5:10], cardinality_threshold = 21)
bf.df %>% filter(Age == "26-35" & Gender == "M") %>% bf.df[,5:10] %>% ggpairs(cardinality_threshold = 21)
bf.df %>% filter(Age == "26-35" & Gender == "M") %>% ggpairs( cardinality_threshold = 21)
bf.df %>% filter(Age == "26-35" & Gender == "M") %>% ggpairs( cardinality_threshold = 4000)
bf.df %>% filter(Age == "26-35" & Gender == "M") %>% col(c(5:10)) %>% ggpairs(cardinality_threshold = 21)
bf.df %>% filter(Age == "26-35" & Gender == "M") %>% [,5:10] %>% ggpairs(cardinality_threshold = 21)
bf.df %>% filter(Age == "26-35" & Gender == "M") %>% bf.df[,5:10] %>% ggpairs(cardinality_threshold = 21)
bf.df %>% filter(Age == "26-35" & Gender == "M", col(c(5:10))) %>% ggpairs(cardinality_threshold = 21)
?filter
?select
bf.df %>% filter(Age == "26-35" & Gender == "M" ) -> bf.df2
ggpairs(bf.df2[,5:10], cardinality_threshold = 21)
ggpairs(bf.df2[,c(5,8:10]), cardinality_threshold = 21)
ggpairs(bf.df2[,c(5,8:10])), cardinality_threshold = 21)
ggpairs(bf.df2[,c(5,8:10)), cardinality_threshold = 21)
ggpairs(bf.df2[,c(5,8:10)], cardinality_threshold = 21)
bf.df %>% filter(Age == "26-35" & Gender == "M" ) -> bf.df2
ggpairs(bf.df2[,c(5,8:10)], cardinality_threshold = 21, aes(color = Product_Category_1, alpha 0.5))
bf.df %>% filter(Age == "26-35" & Gender == "M" ) -> bf.df2
ggpairs(bf.df2[,c(5,8:10)], cardinality_threshold = 21, aes(color = Product_Category_1, alpha = 0.5))
View(bf.df2)
bf.df %>% filter(Gender == "M" ) -> bf.df2
ggpairs(bf.df2[,c(4,5,8,9)], cardinality_threshold = 21, aes(color = Product_Category_1, alpha = 0.5))
bf.df %>% filter(Gender == "M") -> bf.df2
ggpairs(bf.df2[,c(4,5,8,9)], cardinality_threshold = 21, aes(color = Age, alpha = 0.5), upper = list(continuous = "density"), lower = list(combo = "denstrip"))
bf.df %>% filter(Gender == "M") -> bf.df2
ggpairs(bf.df2[,c(4,5,8,9)], cardinality_threshold = 21, aes(color = Age, alpha = 0.5), lower = list(combo = "denstrip"))
bf.df %>% filter(Gender == "M") -> bf.df2
ggpairs(bf.df2[,c(4,5,8,9)], cardinality_threshold = 21, aes(color = Age, alpha = 0.5))
bf.df %>% filter(Gender == "M") -> bf.df2
ggpairs(bf.df2[,c(5,8,9,10)], cardinality_threshold = 21, aes(color = Age, alpha = 0.5))
bf.df %>% filter(Gender == "M") -> bf.df2
ggpairs(bf.df2[,c(4,5,8,9,10)], cardinality_threshold = 21, aes(color = Age, alpha = 0.5))
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase)) + geom_bar(show.legend = T, stat = "identity") +     xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto de los hombres") + facet_wrap(~ Gender)
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase)) + geom_bar(show.legend = T, stat = "identity") +     xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ Gender)
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ Gender) + theme(plot.title = element_text(hjust = 0.5))
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase, color = City_Category)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ Gender) + theme(plot.title = element_text(hjust = 0.5))
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase, color = Marital_Status)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ Gender) + theme(plot.title = element_text(hjust = 0.5))
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase, color = Age)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ Gender) + theme(plot.title = element_text(hjust = 0.5))
bf.df %>%  ggplot(aes(x = Product_Category_1, y = Purchase, color = Age)) + geom_boxplot() + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto")
bf.df %>%  ggplot(aes(x = Product_Category_1, y = Purchase, color = Purchase)) + geom_boxplot() + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto")
bf.df %>%  ggplot(aes(x = Product_Category_1, y = Purchase, color = Product_Category_1)) + geom_boxplot() + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto")
bf.df %>%  ggplot(aes(x = Product_Category_1, y = Purchase, color = Product_Category_1)) + geom_boxplot(show.legend = F) + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto") + theme(plot.title = element_text(hjust = 0.5))
shiny::runApp()
runApp()
?tags
runApp()
runApp()
runApp()
runApp()
runApp()
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase, color = Age)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ Gender) + theme(plot.title = element_text(hjust = 0.5))
runApp()
runApp()
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase, color = Age)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ NA) + theme(plot.title = element_text(hjust = 0.5))
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase, color = Age)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ ) + theme(plot.title = element_text(hjust = 0.5))
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase, color = Age)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ 0) + theme(plot.title = element_text(hjust = 0.5))
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase, color = Age)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ " ") + theme(plot.title = element_text(hjust = 0.5))
runApp()
runApp()
runApp()
bf.df[[NA]]
runApp()
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase, color = Age)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ Gender) + theme(plot.title = element_text(hjust = 0.5))
library(igraph)
?as.igraph
make_bipartite_graph(bf.df[1,2])
make_bipartite_graph(bf.df[1], bf.df[2])
graph_from_data_frame(d=bf.df[,c(1,2)], directed = F)
graph_from_data_frame(d=bf.df[,c(1,2)], directed = F) %>% plot()
graph_from_data_frame(d=bf.df[,c(1,2)], directed = F) %>% plot(layout = layout_as_bipartite, vertex.color=c("green","cyan")[V()$type+1])
graph_from_data_frame(d=bf.df[,c(1,2)], directed = F) %>% plot(layout = layout_as_bipartite)
bf.df[,c(1,2)]
?graph_from
?graph_from_data_frame
graph_from_data_frame(d=bf.df[10,c(1,2)], directed = F) %>% plot(layout = layout_as_bipartite)
graph_from_data_frame(d=bf.df[10,c(1,2)], directed = F)
graph_from_data_frame(d=bf.df[10,c(1,2)], directed = F) %>% plot()
graph_from_data_frame(d=bf.df[c(:10),c(1,2)], directed = F) %>% plot()
graph_from_data_frame(d=bf.df[c(1:10),c(1,2)], directed = F) %>% plot()
graph_from_data_frame(d=bf.df[c(1:10),c(1,2)], directed = F) %>% plot(layout = layout_as_bipartite)
graph_from_data_frame(d=bf.df[c(1:10),c(1,2)], directed = F) %>% plot()
graph_from_data_frame(d=bf.df[c(1:10),c(1,2)], directed = F) %>% as.bipartite() %>% plot()
?as_bipartite
graph_from_data_frame(d=bf.df[c(1:10),c(1,2)], directed = F) %>% layout_as_bipartite() %>% plot()
make_bipartite_graph(bf.df[,1],bf.df[,2], directed = F) %>% plot()
graph_from_data_frame(d=bf.df[c(1:10),c(1,2)], directed = F) %>% layout_as_bipartite(types = ) %>% plot()
graph_from_data_frame(d=bf.df[c(1:10),c(1,2)], directed = F) %>%  plot()
g = graph_from_data_frame(d=bf.df[c(1:10),c(1,2)], directed = F) %>%  plot()
V(g)$type <- FALSE
g = graph_from_data_frame(d=bf.df[c(1:10),c(1,2)], directed = F) %>%  plot()
V(g)$type <- FALSE
V(g)$type <- FALSE
g = graph_from_data_frame(d=bf.df[c(1:10),c(1,2)], directed = F)
V(g)$type <- FALSE
V(g)$type[V(g)$name == c(1:5)] <- TRUE
plot(g)
plot(g, layout_as_bipartite)
layout_as_bipartite(g)
plot(layout_as_bipartite(g))
layout_as_bipartite(g)
V(g)$name == c(1:5)
V(g)$type[V(g)$name == c(1)] <- TRUE
V(g)$name == c(1)
V(g)$name
bf.df[c(1:10),c(1,2)]
plot(layout_as_bipartite(g))
plot(g, layout = bipartite)
library(tidyverse)
library(webshot)
library(GGally)
library(recommenderlab)
bf.df = read_csv("BlackFriday.csv") #Se cargan directamente los datos en una tibble
bf.df %>% summary() #Se comprueban los datos que contiene para saber como tratarlos
bf.df %>% str()
bf.df %>% head()
bf.df %>% tail()
bf.df = mutate(bf.df[,-c(10:11)]) %>% na.omit %>% droplevels() #Se eliminan NAs (Especialmente concentrados en las columnas Product_Category 2 y 3)
bf.df = bf.df[!duplicated(bf.df),] #Se eliminan duplicados en caso de haberlos
bf.df$User_ID = bf.df$User_ID - 1000000 #Se convierten User_ID en números del 1 al 6040
bf.df$User_ID = as.factor(bf.df$User_ID) #Se transforman a factor los datos que se considera oportuno
bf.df$Product_ID = as.factor(bf.df$Product_ID)
bf.df$Gender = as.factor(bf.df$Gender)
bf.df$Age = as.factor(bf.df$Age)
bf.df$City_Category = as.factor(bf.df$City_Category)
bf.df$Marital_Status = as.factor(bf.df$Marital_Status)
bf.df$Stay_In_Current_City_Years = as.factor(bf.df$Stay_In_Current_City_Years)
bf.df$Product_Category_1 = as.factor(bf.df$Product_Category_1)
bf.df$Occupation = as.factor(bf.df$Occupation)
bf.df %>% summary() #De nuevo se comprueban los datos para confirmar que ya estén "limpios"
bf.df %>% str()
#En mi pc tarda un poco en cargar los gráficos. Espero que con un procesador más potente sea más fluido.
knitr::include_app("http://127.0.0.1:3977", height = 750)
bf.df %>%  ggplot(aes(x = Product_Category_1, y = Purchase, color = Product_Category_1)) + geom_boxplot(show.legend = F) + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto") + theme(plot.title = element_text(hjust = 0.5))
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase, color = Age)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ Gender) + theme(plot.title = element_text(hjust = 0.5))
ggpairs(bf.df[,c(6,7,8,10)], cardinality_threshold = 21, aes(color = bf.df$Gender, alpha = 0.5))
bf.rec = data.matrix(bf.df)
bf.rec = as(bf.rec, "realRatingMatrix")
ubcf = Recommender(data = bf.rec, method = "UBCF")
knitr::opts_chunk$set(echo = TRUE)
entrenamiento = createDataPartition(bf.rec$User_ID, p=0.6, list=FALSE)
library(caret)
entrenamiento = createDataPartition(bf.rec$User_ID, p=0.6, list=FALSE)
entrenamiento = createDataPartition(bf.rec, p=0.6, list=FALSE)
entrenamiento = createDataPartition(bf.df$User_ID, p=0.6, list=FALSE)
train = bf.rec[entrenamiento,]
View(bf.rec)
train = bf.rec[1:430061]
test = bf.rec[430062:537577]
recom_hibrida = HybridRecommender(
Recommender(train, method = "UBCF"),
Recommender(train, method = "RANDOM"),
weights = c(0.85, 0.15))
as(predict(recom_hibrida, test, 5), "list")
test = bf.rec[430062:430072]
recom_hibrida = HybridRecommender(
Recommender(train, method = "UBCF"),
Recommender(train, method = "RANDOM"),
weights = c(0.85, 0.15))
as(predict(recom_hibrida, test, 5), "list")
recom_hibrida = HybridRecommender(
Recommender(train, method = "UBCF"),
Recommender(train, method = "RANDOM"),
weights = c(0.8, 0.2))
as(predict(recom_hibrida, test, 5), "list")
data("MovieLense")
View(MovieLense)
bf.df$Product_ID = as.character(bf.df$Product_ID)
bf.rec = data.matrix(bf.df)
View(bf.rec)
View(bf.df)
bf.rec = as(bf.df, "realRatingMatrix")
bf.rec = as(bf.df, "realRatingMatrix")
bf.rec = data.matrix(bf.df)
View(bf.df)
View(bf.rec)
bf.rec[2,]
bf.rec[,2]
bf.rec[,2] = bf.df$Product_ID
View(bf.rec)
View(bf.df)
View(bf.df)
bf.rec = as(bf.df, "realRatingMatrix")
bf.rec = as(bf.rec, "realRatingMatrix")
View(bf.rec)
bf.rec[,2]
bf.rec[[,2]]
bf.rec[1,2]
bf.rec[,2] = bf.df$Product_ID
bf.rec = as(bf.df[,1:3], "realRatingMatrix")
bf.rec = as(bf.df[,1:2], "realRatingMatrix")
bf.rec = as(bf.df[,3:5], "realRatingMatrix")
bf.rec = as(bf.df[,8:10], "realRatingMatrix")
rec = Recommender(train, method = "UBCF")
as(predict(rec, test, 5), "list")
bf.df %>%  ggplot(aes(x = Product_Category_1, y = Purchase, color = Product_Category_1)) + geom_boxplot(show.legend = F) + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto") + theme(plot.title = element_text(hjust = 0.5))
ggpairs(bf.df[,c(6,7,8,10)], cardinality_threshold = 21, aes(color = bf.df$Gender, alpha = 0.5))
group_by(User_ID)
bf.df = bf.df %>% group_by(User_ID)
View(bf.df)
bf.df = bf.df %>% group_by(User_ID)
?summarise
Gender[1]
bf.df$Gender[1]
bf.df = bf.df %>% group_by(User_ID) %>% summarise(Gender = Gender[1],Age = Age[1],Occupation = Occupation[1],
City_Category = City_Category[1], Stay_In_Current_City_Years = Stay_In_Current_City_Years[1],
Marital_Status = Marital_Status[1], Purchase = sum(Purchase), Item_Count = n())
View(bf.df)
bf.df = read_csv("BlackFriday.csv") #Se cargan directamente los datos en una tibble
bf.df = bf.df %>% group_by(User_ID) %>% summarise(Gender = Gender[1],Age = Age[1],Occupation = Occupation[1],
City_Category = City_Category[1], Stay_In_Current_City_Years = Stay_In_Current_City_Years[1],
Marital_Status = Marital_Status[1], Purchase = sum(Purchase), Item_Count = n())
bf.df = read_csv("BlackFriday.csv") #Se cargan directamente los datos en una tibble
bf.df %>% summary() #Se comprueban los datos que contiene para saber como tratarlos
bf.df %>% str()
bf.df %>% head()
bf.df %>% tail()
bf.df = mutate(bf.df[,-c(10:11)]) %>% na.omit %>% droplevels() #Se eliminan NAs (Especialmente concentrados en las columnas Product_Category 2 y 3)
bf.df = bf.df[!duplicated(bf.df),] #Se eliminan duplicados en caso de haberlos
bf.df$User_ID = bf.df$User_ID - 1000000 #Se convierten User_ID en números del 1 al 6040
bf.df$User_ID = as.factor(bf.df$User_ID) #Se transforman a factor los datos que se considera oportuno
bf.df$Product_ID = as.factor(bf.df$Product_ID)
bf.df$Gender = as.factor(bf.df$Gender)
bf.df$Age = as.factor(bf.df$Age)
bf.df$City_Category = as.factor(bf.df$City_Category)
bf.df$Marital_Status = as.factor(bf.df$Marital_Status)
bf.df$Stay_In_Current_City_Years = as.factor(bf.df$Stay_In_Current_City_Years)
bf.df$Product_Category_1 = as.factor(bf.df$Product_Category_1)
bf.df$Occupation = as.factor(bf.df$Occupation)
bf.df = bf.df %>% group_by(User_ID) %>% summarise(Gender = Gender[1],Age = Age[1],Occupation = Occupation[1],
City_Category = City_Category[1], Stay_In_Current_City_Years = Stay_In_Current_City_Years[1],
Marital_Status = Marital_Status[1], Purchase = sum(Purchase), Item_Count = n())
bf.df %>% summary() #De nuevo se comprueban los datos para confirmar que ya estén "limpios"
bf.df %>% str()
bf.df$
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase, color = Age)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ Gender) + theme(plot.title = element_text(hjust = 0.5))
ggpairs(bf.df[,c(6,7,8,10)], cardinality_threshold = 21, aes(color = bf.df$Gender, alpha = 0.5))
ggpairs(bf.df[,c(6,7,8)], cardinality_threshold = 21, aes(color = bf.df$Gender, alpha = 0.5))
bfcant.df = bf.df %>% group_by(User_ID) %>% summarise(Gender = Gender[1],Age = Age[1],Occupation = Occupation[1],
City_Category = City_Category[1], Stay_In_Current_City_Years = Stay_In_Current_City_Years[1],
Marital_Status = Marital_Status[1], Item_Count = n())
ggpairs(bfcant.df)
ggpairs(bfcant.df[,c(2:9)])
ggpairs(bfcant.df[,c(2:8)])
bf.df = read_csv("BlackFriday.csv") #Se cargan directamente los datos en una tibble
bf.df %>% summary() #Se comprueban los datos que contiene para saber como tratarlos
bf.df %>% str()
bf.df %>% head()
bf.df %>% tail()
bf.df = mutate(bf.df[,-c(10:11)]) %>% na.omit %>% droplevels() #Se eliminan NAs (Especialmente concentrados en las columnas Product_Category 2 y 3)
bf.df = bf.df[!duplicated(bf.df),] #Se eliminan duplicados en caso de haberlos
bf.df$User_ID = bf.df$User_ID - 1000000 #Se convierten User_ID en números del 1 al 6040
bf.df$User_ID = as.factor(bf.df$User_ID) #Se transforman a factor los datos que se considera oportuno
bf.df$Product_ID = as.factor(bf.df$Product_ID)
bf.df$Gender = as.factor(bf.df$Gender)
bf.df$Age = as.factor(bf.df$Age)
bf.df$City_Category = as.factor(bf.df$City_Category)
bf.df$Marital_Status = as.factor(bf.df$Marital_Status)
bf.df$Stay_In_Current_City_Years = as.factor(bf.df$Stay_In_Current_City_Years)
bf.df$Product_Category_1 = as.factor(bf.df$Product_Category_1)
bf.df$Occupation = as.factor(bf.df$Occupation)
bfcant.df = bf.df %>% group_by(User_ID) %>% summarise(Gender = Gender[1],Age = Age[1],Occupation = Occupation[1],
City_Category = City_Category[1], Stay_In_Current_City_Years = Stay_In_Current_City_Years[1],
Marital_Status = Marital_Status[1], Item_Count = n())
bf.df %>% summary() #De nuevo se comprueban los datos para confirmar que ya estén "limpios"
bf.df %>% str()
ggpairs(bf.df[,c(6,7,8,10)], cardinality_threshold = 21, aes(color = bf.df$Gender, alpha = 0.5))
ggpairs(bfcant.df[,c(2:8)], cardinality_threshold = 21)
ggpairs(bfcant.df[,c(3:8)], cardinality_threshold = 21, aes(color = bf.df$Gender, alpha = 0.5))
ggpairs(bfcant.df[,c(3:8)], cardinality_threshold = 21, aes(color = bf.df$Gender, alpha = 0.5))
ggpairs(bfcant.df[,c(3:8)], cardinality_threshold = 21, aes(color = bfcant.df$Gender, alpha = 0.5))
View(bf.df)
ggpairs(bfcant.df[,c(5:8)], cardinality_threshold = 21, aes(color = bfcant.df$Gender, alpha = 0.5))
bf.df$City_Category %>% count(Purchase)
bf.df$City_Category["A"] %>% count(Purchase)
bf.df$City_Category[A] %>% count(Purchase)
bf.df$City_Category %>% sum(Purchase)
bf.df$City_Category
bf.df %>% plot(x = City_Category, y = Purchase)
bf.df %>% plot(aes(x = City_Category, y = Purchase)
bf.df %>% plot(aes(x = City_Category, y = Purchase))
bf.df %>% plot(x = bf.df$City_Category, y = bf.df$Purchase)
bf.df %>% plot(x = bf.df$City_Category, y = bf.df$Purchase)
bfcant.df %>% plot(x = bfcant.df$City_Category, y = bfcant.df$Item_Count)
bf.df %>% ggplot(x = bf.df$City_Category, y = bf.df$Purchase) + geom_bar()
bf.df %>% ggplot(aes(x = City_Category, y = Purchase)) + geom_bar()
ggplot(bf.df, aes(x = City_Category, y = Purchase)) + geom_bar()
ggplot(bf.df, aes(x = City_Category, y = Purchase)) + geom_bar(show.legend = F, stat = "identity")
ggplot(bf.df, aes(x = City_Category, y = Purchase)) + geom_bar(show.legend = F, stat = "identity")
ggplot(bfcant.df, aes(x = City_Category, y = Item_Count)) + geom_bar(show.legend = F, stat = "identity")
ggpairs(bfcant.df[,c(5:8)], cardinality_threshold = 21, aes(color = bfcant.df$Gender, alpha = 0.5))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(webshot)
library(GGally)
library(recommenderlab)
library(caret)
bf.df = read_csv("BlackFriday.csv") #Se cargan directamente los datos en una tibble
bf.df %>% summary() #Se comprueban los datos que contiene para saber como tratarlos
bf.df %>% str()
bf.df %>% head()
bf.df %>% tail()
bf.df = mutate(bf.df[,-c(10:11)]) %>% na.omit %>% droplevels() #Se eliminan NAs (Especialmente concentrados en las columnas Product_Category 2 y 3)
bf.df = bf.df[!duplicated(bf.df),] #Se eliminan duplicados en caso de haberlos
bf.df$User_ID = bf.df$User_ID - 1000000 #Se convierten User_ID en números del 1 al 6040
bf.df$User_ID = as.factor(bf.df$User_ID) #Se transforman a factor los datos que se considera oportuno
bf.df$Product_ID = as.factor(bf.df$Product_ID)
bf.df$Gender = as.factor(bf.df$Gender)
bf.df$Age = as.factor(bf.df$Age)
bf.df$City_Category = as.factor(bf.df$City_Category)
bf.df$Marital_Status = as.factor(bf.df$Marital_Status)
bf.df$Stay_In_Current_City_Years = as.factor(bf.df$Stay_In_Current_City_Years)
bf.df$Product_Category_1 = as.factor(bf.df$Product_Category_1)
bf.df$Occupation = as.factor(bf.df$Occupation)
bf.df %>% summary() #De nuevo se comprueban los datos para confirmar que ya estén "limpios"
bf.df %>% str()
