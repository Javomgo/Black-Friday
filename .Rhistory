knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(webshot)
bf.df = read_csv("BlackFriday.csv") #Se cargan directamente los datos en una tibble
bf.df %>% summary() #Se comprueban los datos que contiene para saber como tratarlos
bf.df %>% str()
bf.df %>% head()
bf.df %>% tail()
bf.df = mutate(bf.df[,-c(10:11)]) %>% na.omit %>% droplevels() #Se eliminan NAs (Especialmente concentrados en las columnas Product_Category 2 y 3)
bf.df = bf.df[!duplicated(bf.df),] #Se eliminan duplicados en caso de haberlos
bf.df$User_ID = bf.df$User_ID - 1000000 #Se convierten User_ID en números del 1 al 6040
bf.df$Product_ID = as.factor(bf.df$Product_ID) #Se transforman a factor los datos que se considera oportuno
bf.df$Gender = as.factor(bf.df$Gender)
bf.df$Age = as.factor(bf.df$Age)
bf.df$City_Category = as.factor(bf.df$City_Category)
bf.df$Marital_Status = as.factor(bf.df$Marital_Status)
bf.df$Stay_In_Current_City_Years = as.factor(bf.df$Stay_In_Current_City_Years)
bf.df$Product_Category_1 = as.factor(bf.df$Product_Category_1)
bf.df$Occupation = as.factor(bf.df$Occupation)
bf.df %>% summary() #De nuevo se comprueban los datos para confirmar que ya estén "limpios"
bf.df %>% str()
View(bf.df)
ggpairs(auto[,])
install.packages("GGally")
library(GGally)
ggpairs(auto[,])
ggpairs(bf.df)
ggpairs(bf.df[,c(1,3:10)])
View(bf.df)
ggpairs(bf.df[,c(1,3,4,6:10)])
ggpairs(bf.df, cardinality_threshold = 20)
ggpairs(bf.df[,1,3:10], cardinality_threshold = 20)
ggpairs(bf.df[,c(1,3:10)], cardinality_threshold = 20)
ggpairs(bf.df[,c(1,3:10)], cardinality_threshold = 21)
ggpairs(bf.df[,c(3:10)], cardinality_threshold = 21)
?ggpairs
bf.df %>% filter(Age == "26-35" & Gender == "M") %>% ggpairs(bf.df[,5:10], cardinality_threshold = 21)
bf.df %>% filter(Age == "26-35" & Gender == "M") %>% ggpairs([,5:10], cardinality_threshold = 21)
bf.df[,5:10] %>% filter(Age == "26-35" & Gender == "M") %>% ggpairs(cardinality_threshold = 21)
bf.df %>% filter(Age == "26-35" & Gender == "M") %>% ggpairs(bf.df[,5:10], cardinality_threshold = 21)
bf.df[,5:10]
bf.df %>% filter(Age == "26-35" & Gender == "M") %>% ggpairs(bf.df[,5:10], cardinality_threshold = 21)
bf.df %>% filter(Age == "26-35" & Gender == "M") %>% bf.df[,5:10] %>% ggpairs(cardinality_threshold = 21)
bf.df %>% filter(Age == "26-35" & Gender == "M") %>% ggpairs( cardinality_threshold = 21)
bf.df %>% filter(Age == "26-35" & Gender == "M") %>% ggpairs( cardinality_threshold = 4000)
bf.df %>% filter(Age == "26-35" & Gender == "M") %>% col(c(5:10)) %>% ggpairs(cardinality_threshold = 21)
bf.df %>% filter(Age == "26-35" & Gender == "M") %>% [,5:10] %>% ggpairs(cardinality_threshold = 21)
bf.df %>% filter(Age == "26-35" & Gender == "M") %>% bf.df[,5:10] %>% ggpairs(cardinality_threshold = 21)
bf.df %>% filter(Age == "26-35" & Gender == "M", col(c(5:10))) %>% ggpairs(cardinality_threshold = 21)
?filter
?select
bf.df %>% filter(Age == "26-35" & Gender == "M" ) -> bf.df2
ggpairs(bf.df2[,5:10], cardinality_threshold = 21)
ggpairs(bf.df2[,c(5,8:10]), cardinality_threshold = 21)
ggpairs(bf.df2[,c(5,8:10])), cardinality_threshold = 21)
ggpairs(bf.df2[,c(5,8:10)), cardinality_threshold = 21)
ggpairs(bf.df2[,c(5,8:10)], cardinality_threshold = 21)
bf.df %>% filter(Age == "26-35" & Gender == "M" ) -> bf.df2
ggpairs(bf.df2[,c(5,8:10)], cardinality_threshold = 21, aes(color = Product_Category_1, alpha 0.5))
bf.df %>% filter(Age == "26-35" & Gender == "M" ) -> bf.df2
ggpairs(bf.df2[,c(5,8:10)], cardinality_threshold = 21, aes(color = Product_Category_1, alpha = 0.5))
View(bf.df2)
bf.df %>% filter(Gender == "M" ) -> bf.df2
ggpairs(bf.df2[,c(4,5,8,9)], cardinality_threshold = 21, aes(color = Product_Category_1, alpha = 0.5))
bf.df %>% filter(Gender == "M") -> bf.df2
ggpairs(bf.df2[,c(4,5,8,9)], cardinality_threshold = 21, aes(color = Age, alpha = 0.5), upper = list(continuous = "density"), lower = list(combo = "denstrip"))
bf.df %>% filter(Gender == "M") -> bf.df2
ggpairs(bf.df2[,c(4,5,8,9)], cardinality_threshold = 21, aes(color = Age, alpha = 0.5), lower = list(combo = "denstrip"))
bf.df %>% filter(Gender == "M") -> bf.df2
ggpairs(bf.df2[,c(4,5,8,9)], cardinality_threshold = 21, aes(color = Age, alpha = 0.5))
bf.df %>% filter(Gender == "M") -> bf.df2
ggpairs(bf.df2[,c(5,8,9,10)], cardinality_threshold = 21, aes(color = Age, alpha = 0.5))
bf.df %>% filter(Gender == "M") -> bf.df2
ggpairs(bf.df2[,c(4,5,8,9,10)], cardinality_threshold = 21, aes(color = Age, alpha = 0.5))
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase)) + geom_bar(show.legend = T, stat = "identity") +     xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto de los hombres") + facet_wrap(~ Gender)
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase)) + geom_bar(show.legend = T, stat = "identity") +     xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ Gender)
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ Gender) + theme(plot.title = element_text(hjust = 0.5))
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase, color = City_Category)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ Gender) + theme(plot.title = element_text(hjust = 0.5))
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase, color = Marital_Status)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ Gender) + theme(plot.title = element_text(hjust = 0.5))
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase, color = Age)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ Gender) + theme(plot.title = element_text(hjust = 0.5))
bf.df %>%  ggplot(aes(x = Product_Category_1, y = Purchase, color = Age)) + geom_boxplot() + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto")
bf.df %>%  ggplot(aes(x = Product_Category_1, y = Purchase, color = Purchase)) + geom_boxplot() + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto")
bf.df %>%  ggplot(aes(x = Product_Category_1, y = Purchase, color = Product_Category_1)) + geom_boxplot() + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto")
bf.df %>%  ggplot(aes(x = Product_Category_1, y = Purchase, color = Product_Category_1)) + geom_boxplot(show.legend = F) + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto") + theme(plot.title = element_text(hjust = 0.5))
shiny::runApp()
runApp()
?tags
runApp()
runApp()
runApp()
runApp()
runApp()
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase, color = Age)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ Gender) + theme(plot.title = element_text(hjust = 0.5))
runApp()
runApp()
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase, color = Age)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ NA) + theme(plot.title = element_text(hjust = 0.5))
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase, color = Age)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ ) + theme(plot.title = element_text(hjust = 0.5))
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase, color = Age)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ 0) + theme(plot.title = element_text(hjust = 0.5))
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase, color = Age)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ " ") + theme(plot.title = element_text(hjust = 0.5))
runApp()
runApp()
runApp()
bf.df[[NA]]
runApp()
bf.df %>% ggplot(aes(x = Product_Category_1, y = Purchase, color = Age)) + geom_bar(show.legend = T, stat = "identity") + xlab("Categoría de producto") + ylab("Gasto") + ggtitle("Gasto por categoría de producto mujeres frente a hombres") + facet_wrap(~ Gender) + theme(plot.title = element_text(hjust = 0.5))
library(igraph)
?as.igraph
make_bipartite_graph(bf.df[1,2])
make_bipartite_graph(bf.df[1], bf.df[2])
graph_from_data_frame(d=bf.df[,c(1,2)], directed = F)
graph_from_data_frame(d=bf.df[,c(1,2)], directed = F) %>% plot()
graph_from_data_frame(d=bf.df[,c(1,2)], directed = F) %>% plot(layout = layout_as_bipartite, vertex.color=c("green","cyan")[V()$type+1])
graph_from_data_frame(d=bf.df[,c(1,2)], directed = F) %>% plot(layout = layout_as_bipartite)
bf.df[,c(1,2)]
?graph_from
?graph_from_data_frame
graph_from_data_frame(d=bf.df[10,c(1,2)], directed = F) %>% plot(layout = layout_as_bipartite)
graph_from_data_frame(d=bf.df[10,c(1,2)], directed = F)
graph_from_data_frame(d=bf.df[10,c(1,2)], directed = F) %>% plot()
graph_from_data_frame(d=bf.df[c(:10),c(1,2)], directed = F) %>% plot()
graph_from_data_frame(d=bf.df[c(1:10),c(1,2)], directed = F) %>% plot()
graph_from_data_frame(d=bf.df[c(1:10),c(1,2)], directed = F) %>% plot(layout = layout_as_bipartite)
graph_from_data_frame(d=bf.df[c(1:10),c(1,2)], directed = F) %>% plot()
graph_from_data_frame(d=bf.df[c(1:10),c(1,2)], directed = F) %>% as.bipartite() %>% plot()
?as_bipartite
graph_from_data_frame(d=bf.df[c(1:10),c(1,2)], directed = F) %>% layout_as_bipartite() %>% plot()
make_bipartite_graph(bf.df[,1],bf.df[,2], directed = F) %>% plot()
graph_from_data_frame(d=bf.df[c(1:10),c(1,2)], directed = F) %>% layout_as_bipartite(types = ) %>% plot()
graph_from_data_frame(d=bf.df[c(1:10),c(1,2)], directed = F) %>%  plot()
g = graph_from_data_frame(d=bf.df[c(1:10),c(1,2)], directed = F) %>%  plot()
V(g)$type <- FALSE
g = graph_from_data_frame(d=bf.df[c(1:10),c(1,2)], directed = F) %>%  plot()
V(g)$type <- FALSE
V(g)$type <- FALSE
g = graph_from_data_frame(d=bf.df[c(1:10),c(1,2)], directed = F)
V(g)$type <- FALSE
V(g)$type[V(g)$name == c(1:5)] <- TRUE
plot(g)
plot(g, layout_as_bipartite)
layout_as_bipartite(g)
plot(layout_as_bipartite(g))
layout_as_bipartite(g)
V(g)$name == c(1:5)
V(g)$type[V(g)$name == c(1)] <- TRUE
V(g)$name == c(1)
V(g)$name
bf.df[c(1:10),c(1,2)]
plot(layout_as_bipartite(g))
plot(g, layout = bipartite)
